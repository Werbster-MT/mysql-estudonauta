Analogia ao modo como os dados eram armazenados na decada de 50
Registros - fichas
Tabelas - pastas
Arquivos - armários

Arquivos > tabelas > registros

Arquivos de Acesso Sequencial x Arquivos de Acesso Direto 

Princípio de Banco de Dados:
* Base de Dados
* SGBD - Sistema Gerenciador de Banco de Dados
* Linguagem de Exploração
* Programas Adicionais

IBM: 
* Modelos Hierárquico e Modelos de Rede
* Modelo Relacional 

SQL: Structured Query Language
- Linguagem de consulta baseada em queries 
- Padronização ANSI 
- Ex: MySQL Oracle, Maria DB, Firebird  e Postgree SQL

MySQL:
* DDL(Data Definition Language) - Porção de Definição (comandos de definição)
* DML(Data Manipulation Language) - Porção de Manipulação (comandos de manipulação)
* DQL(Data Query Language) - Porção de Solicitações (comandos de solicitação) 
* DCL(Data Control Language) - Porção de Controle (comandos de controle)
* DTL(Data Transaction Language) - Porção de Transações (solicitações bem atendidas baseadas em DICA)
-> DICA:
- Durabilidade: dados alterados mantêm o estado salvo.
- Isolamento: duas transações feitas ao mesmo tempo não interferem uma na outra.
- Consistência: toda transação leva um DB de um estado consistente para outro consistente.
- Atomicidade: toda transação deve ser atômica (toda ela acontece ou nada acontece).

* Comandos MySQL:
- Criar banco: CREATE DATABASE cadastro;
- Criar tabela: 
use cadastro;
CREATE TABLE pessoas (
	nome varchar(30),
	idade tinyint(3),
	sexo char(1),	
	peso float,
	altura float,
	nacionalidade varchar(20)
);

- Inserir dados: INSERT INTO pessoas
(id, nome, nascimento, sexo, peso, altura, nacionalidade)
values
('1', 'Godofredo', '1984-01-02', 'M', '78.5', '1.83', 'Brasil'); 

- Apagar banco: DROP DATABASE cadastro;

- Constraints: São os parâmetros da query
Ex: 
create database cadastro
default character set utf8
default collate utf8_general_ci; // Collation (também serve para a definição dos caracteres)

- Selecionando atributos:
Ex: select * from pessoas;

- Adicionar coluna: add column profissao varchar(10)
Ex: 
alter table pessoas
add column profissao varchar(10);

Ex2: 
alter table pessoas
add column profissao varchar(10);

Ex3:
alter table pessoas
add column profissao varchar(10) first; 

- Modificar coluna: modify column profissao varchar(20)
alter table pessoas
modify column profissao varchar(20);

- Alterar o nome da coluna: change column profissao prof varchar(20) not null;
Ex: 
alter table pessoas
change column profissao prof varchar(20) not null;

- Alterar o nome da tabela: rename to gafanhotos;
Ex: 
alter table pessoas 
rename to gafanhotos;

- Adicionar primary key: 
Ex:
alter table cursos
add primary key(idcurso);

- Remover coluna: drop column profissao 
Ex:
alter table pessoas
drop column profissao;

* Tipos Primitivos:
- Númerico: 
-> Inteiros: TinyInt, SmallInt, Int, MediumInt e BigInt
-> Reais: Decimal, Float, Double e Real
-> Lógicos: Bit e Boolean

- Data/Tempo: Date, DateTime, TimeStamp, Time e Year

- Literais: 
-> Caractere: Char e VarChar
-> Texto: TinyText, Text, MediumText e LongText
-> Binário: TinyBlob, Blob, MediumBlob e LongBlob
-> Coleção: Enum e Set

- Espacial: Geometry, Point, Polygon e MultiPolygon

// Comando para execução do XAMPP - sudo /opt/lampp/manager-linux-x64.run

* Manipulando linhas: 
- Atualizar uma linha da tabela: update cursos set nome = 'x' where id = 'y';
Ex: 
update cursos 
set nome = 'HTML5' 
where idcurso = 1;

Ex: 
update cursos 
set nome = 'Java', carga = 40,  ano = '2015'
where idcurso = 5
limit 1;
-> O limit serve para garantir uma quantidade x de elementos alterados.

OBS: Também é possível atualizar mais de uma linha, porém para isso é necessário desabilitar o safe mode do Workbench MySQL. 
Ex: 
update cursos
set carga = '800'
where ano = '2018';

* Deletar uma linha da tabela: delete from cursos where idcurso = 'x'
Ex: 
delete from cursos 
where idcurso = '8';  

OBS: Também é possível apagar multiplas linhas de uma vez. 
Ex: 
delete from cursos 
where ano = '2050'
limit 2; 

* Deletar todas as linnhas da tabela: truncate table cursos; 
Ex: 
truncate table cursos;
-> Ou somente: 
Ex: truncate cursos.
OBS: Desse modo a estrutura da tabela se mantém intacta, poŕem todos os seus registros são apagados, diferentemente da utilização do drop. 

* Select 
O comando select classifica-se como um DQL (Data Queries Language) e desse modo possibilita diversas constraints para busca/seleção de dados.

- Selecionar todas as colunas de uma tabela:
Ex:
select * from cursos
order by nome asc;

- Selecionar colunas específicas de uma tabela:
Ex: 
select ano, nome, carga from cursos
order by ano;

- Selecionar colunas a partir de uma condição: 
Ex: 
select nome, carga from cursos
where ano = '2016'
order by nome; 
OBS: O order by possui uma ordem com relação as colunas, podendo utilizar mais de uma como parâmetro.

- Selecionar colunas com demais operadores relacionais:
Ex:
select nome, descricao, ano from cursos
where ano <= 2015 
order by ano, nome;

Ex2:
select nome, ano from cursos
where ano between 2014 and 2016
order by ano desc; 
OBS: Nesse caso o between permite especificar uma faixa de valores da condição. Além disso o desc (descendent) implica na ordem inversa do coluna ano.

Ex3: 
select nome, descricao, ano from cursos 
where ano in (2014, 2016, 2020)
order by ano;
OBS: Nesse caso o in serve para estabelecer especificamente os valores a serem considerados pela condição do where.

- Selecionar colunas usando operadores lógicos:
Ex: 
select nome, carga, totaulas from cursos 
where carga > 35 and totaulas < 30;

Ex2:
select nome, carga, totaulas from cursos 
where carga > 35 or totaulas < 30; 

* Distinguindo dados: usado quando há repetição de linhas e só necessário saber o total para um determinado parâmetro
Ex: 
select distinct nacionalidade from gafanhotos; 

* Operador semelhante: like 
Ex:
select * from gafanhotos where sexo = 'F' and nacionalidade = 'Brasil' and nome like "J%"; 
OBS: Pode ser usado com os curingas % e _ para indicar a não obrigatoriedade da presença de caracter ou o contrário, respectivamente.

* Operador de contagem:
Ex:
select count(nome) from cursos where carga > 40;

* Operador de máximo:
Ex:
select max(totaulas) from cursos where ano = '2016';

* Operador de mínimo: 
Ex: 
select nome, min(totaulas) from cursos where ano = '2016';

* Operador de soma:
Ex:
select sum(totaulas) from cursos where ano = '2016';

* Operador média:
Ex:
select avg(totaulas) from cursos where ano = '2016';

* Agrupamento:
Ex:
select totaulas, count(*) from cursos
group by totaulas
order by totaulas; 

Ex2:
select carga, count(*) from cursos where totaulas = '30'
group by carga;

Ex3:
select ano, count(*) from cursos
where totaulas > '30'
group by ano
having ano > '2013'
order by count(*) desc; 

Ex4:
select carga, count(*) from cursos 
where ano > '2015'
group by carga
having carga > (select avg(carga) from cursos);

Ex5:
select nacionalidade, count(*) from gafanhotos 
where nacionalidade != 'Brasil'
group by nacionalidade
having count(*) > '3'; 

* Modelo relacional 
- Diagrama Entidade Relacionamento 

* Cardinalidade: 
- n para n (muitos para muitos)
- 1 para 1 
- 1 para n (um para muitos)

* Chaves :
- Chave primária: é um atributo específico que identifica as tuplas. 
- Chave estrangeira: é uma chave primária de uma entidade armazenada em outra.
